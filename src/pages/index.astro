---
import { getCollection } from "astro:content";
import Heading from "@/components/Heading.astro";
import Pagination from "@/components/Pagination.astro";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import Layout from "@/layouts/BaseLayout.astro";

// Number of items per page
const perPage = 10;

// Current page (hard-coded to page 1 here; you could make this dynamic later)
const page = 1;

// Fetch all “sites” from the content collection and sort them alphabetically by title
const allSites = (await getCollection("sites")).sort((a, b) =>
  (a.data.title || "").localeCompare(b.data.title || ""),
);

// Take only the first `perPage` items for this page
const paginatedSites = allSites.slice(0, perPage);

// Compute how many pages are needed in total
const totalPages = Math.ceil(allSites.length / perPage);

// Build a set of all unique tags across every site
const tagSet = new Set<string>();
for (const site of allSites) {
  for (const tag of site.data.tags ?? []) {
    tagSet.add(tag);
  }
}
// Convert the set into an array for easy iteration
const uniqueTags = Array.from(tagSet);

const title = "Sites You Wish You Knew Earlier!";
const description = "Sites You Wish You Knew Earlier by AREA44";
---

<Layout title={title} description={description}>
  <Heading>Browse Sites by Tag</Heading>

  <div class="flex flex-wrap gap-1 mb-4">
    {
      uniqueTags.map((tag) => (
        <Badge>
          <!-- Link each badge to its corresponding tag page -->
          <a href={`/tag/${tag.replace(/\s+/g, "-")}/`}>{tag}</a>
        </Badge>
      ))
    }
  </div>

  <Heading>{title}</Heading>

  <div class="pt-4">
    {
      paginatedSites.map((site) => (
        <div class="pb-2">
          <!-- Wrap the entire card in an external link -->
          <a href={site.data.url} target="_blank" rel="noopener noreferrer">
            <Card key={site.id}>
              <CardHeader>
                <CardTitle>{site.data.title}</CardTitle>
                <CardDescription>{site.data.description}</CardDescription>
              </CardHeader>
              <CardFooter className="flex flex-wrap gap-1">
                {
                  (site.data.tags ?? []).map((tag) => (
                    <Badge>
                      <a href={`/tag/${tag.replace(/\s+/g, "-")}/`}>{tag}</a>
                    </Badge>
                  ))
                }
              </CardFooter>
            </Card>
          </a>
        </div>
      ))
    }
  </div>

  <Pagination currentPage={page} totalPages={totalPages} />
</Layout>
