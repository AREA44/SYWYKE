---
import { getCollection } from "astro:content";
import Heading from "@/components/Heading.astro";
import Pagination from "@/components/Pagination.astro";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import Layout from "@/layouts/BaseLayout.astro";

export async function getStaticPaths() {
  const sites = await getCollection("sites");

  const perPage = 10;

  // Calculate how many total pages are needed to display all sites
  const totalPages = Math.ceil(sites.length / perPage);

  // We only generate paths for “page 2” through “page N”
  return Array.from({ length: totalPages - 1 }).map((_, i) => {
    const page = i + 2;

    return {
      params: { page: String(page) },
      props: { page, perPage },
    };
  });
}

// Destructure the “page” and “perPage” values passed in via Astro.props
const { page, perPage } = Astro.props;

// Fetch all sites again and sort them alphabetically by their title
const allSites = (await getCollection("sites")).sort((a, b) =>
  (a.data.title || "").localeCompare(b.data.title || ""),
);

// Calculate the slice indices for the current page
// (page 1 would be slice(0 … perPage), page 2 is slice(perPage … 2*perPage), etc.)
const paginatedSites = allSites.slice((page - 1) * perPage, page * perPage);

// Recompute total number of pages (needed if you want to render a pagination component)
const totalPages = Math.ceil(allSites.length / perPage);

// Build a Set of all unique tags found across every site
const tagSet = new Set<string>();
for (const site of allSites) {
  for (const tag of site.data.tags ?? []) {
    tagSet.add(tag);
  }
}
// Convert the Set into an array for easy iteration in the template
const uniqueTags = Array.from(tagSet);

const title = `Page ${page} | Sites You Wish You Knew Earlier!`;
const description = "Sites You Wish You Knew Earlier by AREA44";
---

<Layout title={title} description={description}>
  <Heading>Browse Sites by Tag</Heading>

  <div class="flex flex-wrap gap-1 mb-4">
    {
      uniqueTags.map((tag) => (
        <Badge>
          <a href={`/tag/${tag.replace(/\s+/g, "-")}/`}>{tag}</a>
        </Badge>
      ))
    }
  </div>

  <Heading>{title}</Heading>

  <div class="pt-4">
    {
      paginatedSites.map((site) => (
        <div class="pb-2">
          <a href={site.data.url} target="_blank" rel="noopener noreferrer">
            <Card key={site.id}>
              <CardHeader>
                <CardTitle>{site.data.title}</CardTitle>
                <CardDescription>{site.data.description}</CardDescription>
              </CardHeader>
              <CardFooter className="flex flex-wrap gap-1">
                {(site.data.tags ?? []).map((tag) => (
                  <Badge>
                    <a href={`/tag/${tag.replace(/\s+/g, "-")}/`}>{tag}</a>
                  </Badge>
                ))}
              </CardFooter>
            </Card>
          </a>
        </div>
      ))
    }
  </div>

  <Pagination currentPage={page} totalPages={totalPages} />
</Layout>
