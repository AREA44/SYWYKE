---
import { getCollection } from "astro:content";
import Heading from "@/components/Heading.astro";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import BaseLayout from "@/layouts/BaseLayout.astro";

// Fetch+sort all sites by title
export const getSites = async () => {
  const sites = await getCollection("sites");
  sites.sort((a, b) => (a.data.title || "").localeCompare(b.data.title || ""));
  return sites;
};

const perPage = 10;

// Generate static paths for each tag & index (again)
export async function getStaticPaths() {
  const sites = await getSites();

  const tagsCount = new Map();
  for (const site of sites) {
    const tagList = site.data.tags ?? [];
    for (const oneTag of tagList) {
      tagsCount.set(oneTag, (tagsCount.get(oneTag) || 0) + 1);
    }
  }

  type PathObject = {
    params: { tag: string; index: string };
    props: { tag: string; index: number };
  };

  const paths: PathObject[] = [];

  for (const [oneTag, count] of tagsCount) {
    const sanitizedTag = oneTag.replace(/\s+/g, "-");
    const totalPages = Math.ceil(count / 10);

    // Only generate pages 2…N in this file
    for (let i = 2; i <= totalPages; i++) {
      paths.push({
        params: { tag: sanitizedTag, index: i.toString() },
        props: { tag: oneTag, index: i },
      });
    }
  }

  return paths;
}

// Props from getStaticPaths (tag: string, index: number)
const { tag, index } = Astro.props as { tag: string; index: number };

// Filter sites by tag
const allSites = await getSites();
const filteredSites = allSites.filter((site) => {
  const siteTags = site.data.tags ?? [];
  return siteTags.includes(tag);
});

// Compute total pages & slice out this page’s items
const totalPages = Math.ceil(filteredSites.length / perPage);
const start = (index - 1) * perPage;
const sites = filteredSites.slice(start, start + perPage);

// Build header/title
const tagHeader = `${filteredSites.length} site${
  filteredSites.length === 1 ? "" : "s"
} tagged with "${tag}"`;
const title = `${tagHeader} | SYWYKE`;
const description = tagHeader;

// Unique tags badge list
const uniqueTags = Array.from(
  new Set(filteredSites.flatMap((s) => s.data.tags ?? [])),
);

// Base path
const basePath = `/tag/${tag.replace(/\s+/g, "-")}`;

/**
 * Same pagination helper as before
 */
function getPaginationItems(currentPage: number, totalPages: number) {
  const delta = 1;
  const range = [];
  const rangeWithDots = [];

  for (let i = 1; i <= totalPages; i++) {
    if (
      i === 1 ||
      i === totalPages ||
      (i >= currentPage - delta && i <= currentPage + delta)
    ) {
      range.push(i);
    }
  }

  let prev = null;
  for (const num of range) {
    if (prev !== null) {
      if (num - prev === 2) {
        rangeWithDots.push(prev + 1);
      } else if (num - prev > 2) {
        rangeWithDots.push("ellipsis");
      }
    }
    rangeWithDots.push(num);
    prev = num;
  }

  return rangeWithDots;
}

const paginationItems =
  totalPages > 1 ? getPaginationItems(index, totalPages) : [];
---

<BaseLayout title={title} description={description}>
  <Heading>Browse Sites by Tag</Heading>

  <div class="flex flex-wrap gap-1 mb-4">
    {
      uniqueTags.map((oneTag) => (
        <Badge>
          <a href={`/tag/${oneTag.replace(/\s+/g, "-")}/`}>{oneTag}</a>
        </Badge>
      ))
    }
  </div>

  <Heading>{tagHeader}</Heading>

  <section class="pt-4 space-y-4">
    {
      sites.map((site) => (
        <Card key={site.id}>
          <CardHeader>
            <CardTitle>
              <a
                href={site.data.url}
                target="_blank"
                rel="noopener noreferrer"
                class="hover:underline"
              >
                {site.data.title}
              </a>
            </CardTitle>
            <CardDescription>{site.data.description}</CardDescription>
          </CardHeader>
          <CardFooter className="flex flex-wrap gap-1">
            {(site.data.tags ?? []).map((tag) => (
              <Badge>
                <a href={`/tag/${tag.replace(/\s+/g, "-")}/`}>{tag}</a>
              </Badge>
            ))}
          </CardFooter>
        </Card>
      ))
    }
  </section>

  <!-- Pagination nav (only if totalPages > 1) -->
  {
    totalPages > 1 && (
      <nav class="mt-8 flex justify-center gap-2">
        {/* Prev button if not page 1 */}
        {index > 1 && (
          <a
            href={
              index - 1 === 1 ? `${basePath}/` : `${basePath}/${index - 1}/`
            }
            class="inline-flex items-center rounded-md border px-3 py-1.5 text-sm font-medium transition-colors hover:bg-muted"
          >
            ← Prev
          </a>
        )}

        {/* Numbered pages + ellipsis */}
        {paginationItems.map((item, idx) => {
          if (item === "ellipsis") {
            return (
              <span class="inline-flex items-center px-3 py-1.5 text-sm font-medium">
                …
              </span>
            );
          }

          const pageNum = item;
          const href =
            pageNum === 1 ? `${basePath}/` : `${basePath}/${pageNum}/`;
          const isActive = pageNum === index;

          return (
            <a
              href={href}
              class={`inline-flex items-center rounded-md border px-3 py-1.5 text-sm font-medium ${
                isActive
                  ? "bg-primary text-primary-foreground"
                  : "hover:bg-muted"
              }`}
            >
              {pageNum}
            </a>
          );
        })}

        {/* Next button if not on last page */}
        {index < totalPages && (
          <a
            href={`${basePath}/${index + 1}/`}
            class="inline-flex items-center rounded-md border px-3 py-1.5 text-sm font-medium transition-colors hover:bg-muted"
          >
            Next →
          </a>
        )}
      </nav>
    )
  }
</BaseLayout>
