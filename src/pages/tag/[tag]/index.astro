---
import { getCollection } from "astro:content";
import Heading from "@/components/Heading.astro";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import BaseLayout from "@/layouts/BaseLayout.astro";

// Fetch+sort all sites by title
export const getSites = async () => {
  const sites = await getCollection("sites");
  sites.sort((a, b) => (a.data.title || "").localeCompare(b.data.title || ""));
  return sites;
};

// Generate static paths for all tags
export async function getStaticPaths() {
  const sites = await getSites();

  const tagsCount = new Map();
  for (const site of sites) {
    const tagList = site.data.tags ?? [];
    for (const oneTag of tagList) {
      tagsCount.set(oneTag, (tagsCount.get(oneTag) || 0) + 1);
    }
  }

  const paths = [];
  for (const [oneTag, count] of tagsCount) {
    // Only push the “page 1” path here; page 2+ will go to [index].astro
    const sanitizedTag = oneTag.replace(/\s+/g, "-");
    paths.push({
      params: { tag: sanitizedTag },
      props: { tag: oneTag },
    });
  }

  return paths;
}

// Props from getStaticPaths:
const { tag } = Astro.props;
const index = 1; // Always page 1 in this file
const perPage = 10;

// Get all sites, filter by tag
const allSites = await getSites();
const filteredSites = allSites.filter((site) => {
  const siteTags = site.data.tags ?? [];
  return siteTags.includes(tag);
});

// Slice out page 1
const sites = filteredSites.slice(0, perPage);
const totalPages = Math.ceil(filteredSites.length / perPage);

// Build header/title
const tagHeader = `${filteredSites.length} site${
  filteredSites.length === 1 ? "" : "s"
} tagged with "${tag}"`;
const title = `${tagHeader} | SYWYKE`;
const description = tagHeader;

// Tags badge list
const uniqueTags = Array.from(
  new Set(filteredSites.flatMap((s) => s.data.tags ?? [])),
);

// Base path for pagination links
const basePath = `/tag/${tag.replace(/\s+/g, "-")}`;

/**
 * Same helper as before: generate an array like [1, "ellipsis", 4, 5, 6, "ellipsis", totalPages]
 */
function getPaginationItems(currentPage: number, totalPages: number) {
  const delta = 1;
  const range = [];
  const rangeWithDots = [];

  for (let i = 1; i <= totalPages; i++) {
    if (
      i === 1 ||
      i === totalPages ||
      (i >= currentPage - delta && i <= currentPage + delta)
    ) {
      range.push(i);
    }
  }

  let prev = null;
  for (const num of range) {
    if (prev !== null) {
      if (num - prev === 2) {
        rangeWithDots.push(prev + 1);
      } else if (num - prev > 2) {
        rangeWithDots.push("ellipsis");
      }
    }
    rangeWithDots.push(num);
    prev = num;
  }

  return rangeWithDots;
}

// Build pagination array only if more than 1 page
const paginationItems =
  totalPages > 1 ? getPaginationItems(index, totalPages) : [];
---

<BaseLayout title={title} description={description}>
  <Heading>Browse Sites by Tag</Heading>

  <!-- Render badges for all tags in the filtered set -->
  <div class="flex flex-wrap gap-1">
    {
      uniqueTags.map((oneTag) => (
        <Badge>
          <a href={`/tag/${oneTag.replace(/\s+/g, "-")}/`}>{oneTag}</a>
        </Badge>
      ))
    }
  </div>

  <Heading>{tagHeader}</Heading>

  <div class="pt-4 space-y-4">
    {
      sites.map((site) => (
        <Card key={site.id}>
          <a href={site.data.url} target="_blank" rel="noopener noreferrer">
            <CardHeader>
              <CardTitle>{site.data.title}</CardTitle>
              <CardDescription>{site.data.description}</CardDescription>
            </CardHeader>
            <CardFooter className="flex flex-wrap gap-1">
              {(site.data.tags ?? []).map((oneTag) => (
                <Badge>
                  <a href={`/tag/${oneTag.replace(/\s+/g, "-")}/`}>{oneTag}</a>
                </Badge>
              ))}
            </CardFooter>
          </a>
        </Card>
      ))
    }
  </div>

  <!-- Only show pagination if more than 1 page exists -->
  {
    totalPages > 1 && (
      <nav class="mt-8 flex justify-center gap-2">
        {/* Prev (do not show on page 1) */}
        {index > 1 && (
          <a
            href={
              index - 1 === 1 ? `${basePath}/` : `${basePath}/${index - 1}/`
            }
            class="inline-flex items-center rounded-md border px-3 py-1.5 text-sm font-medium transition-colors hover:bg-muted"
          >
            ← Prev
          </a>
        )}

        {/* Numbered pages + ellipsis */}
        {paginationItems.map((item, idx) => {
          if (item === "ellipsis") {
            return (
              <span class="inline-flex items-center px-3 py-1.5 text-sm font-medium">
                …
              </span>
            );
          }

          const pageNum = item;
          const href =
            pageNum === 1 ? `${basePath}/` : `${basePath}/${pageNum}/`;
          const isActive = pageNum === index;

          return (
            <a
              href={href}
              class={`inline-flex items-center rounded-md border px-3 py-1.5 text-sm font-medium ${
                isActive
                  ? "bg-primary text-primary-foreground"
                  : "hover:bg-muted"
              }`}
            >
              {pageNum}
            </a>
          );
        })}

        {/* Next (only if not on last page) */}
        {index < totalPages && (
          <a
            href={`${basePath}/${index + 1}/`}
            class="inline-flex items-center rounded-md border px-3 py-1.5 text-sm font-medium transition-colors hover:bg-muted"
          >
            Next →
          </a>
        )}
      </nav>
    )
  }
</BaseLayout>
