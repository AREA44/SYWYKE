---
import { getCollection } from "astro:content";
import Heading from "@/components/Heading.astro";
import Paginator from "@/components/Paginator.astro";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import BaseLayout from "@/layouts/BaseLayout.astro";

// Fetch and sort sites
export const getSites = async () => {
  const sites = await getCollection("sites");
  sites.sort((a, b) => (a.data.title || "").localeCompare(b.data.title || ""));
  return sites;
};

// Get static paths for paginated pages beyond page 1
export async function getStaticPaths() {
  const sites = await getSites();

  const tagsMap = new Map();
  for (const site of sites) {
    for (const tag of site.data.tags ?? []) {
      const existing = tagsMap.get(tag) || [];
      existing.push(site);
      tagsMap.set(tag, existing);
    }
  }

  const paths = [];
  for (const [tag, taggedSites] of tagsMap.entries()) {
    const totalPages = Math.ceil(taggedSites.length / 10);
    const sanitizedTag = tag.replace(/\s+/g, "-");

    for (let page = 2; page <= totalPages; page++) {
      paths.push({
        params: { tag: sanitizedTag, page: page.toString() },
        props: { tag, page },
      });
    }
  }

  return paths;
}

// Props passed in
const { tag, page } = Astro.props;
const currentPage = typeof page === "string" ? Number.parseInt(page, 10) : page;
const perPage = 10;

// Get all sites, filter by tag
const allSites = await getSites();
const filteredSites = allSites.filter((site) =>
  (site.data.tags ?? []).includes(tag),
);

// Paginate
const start = (currentPage - 1) * perPage;
const end = currentPage * perPage;
const sites = filteredSites.slice(start, end);
const totalPages = Math.ceil(filteredSites.length / perPage);

// Derived metadata
const tagHeader = `${filteredSites.length} site${
  filteredSites.length === 1 ? "" : "s"
} tagged with "${tag}"`;
const title = `${tagHeader} | SYWYKE`;
const description = tagHeader;
const basePath = `/tag/${tag.replace(/\s+/g, "-")}`;

const uniqueTags = Array.from(
  new Set(filteredSites.flatMap((s) => s.data.tags ?? [])),
);
---

<BaseLayout title={title} description={description}>
  <Heading>Browse Sites by Tag</Heading>

  <div class="flex flex-wrap gap-1 mb-4">
    {
      uniqueTags.map((oneTag) => (
        <Badge key={oneTag}>
          <a href={`/tag/${oneTag.replace(/\s+/g, "-")}/`}>{oneTag}</a>
        </Badge>
      ))
    }
  </div>

  <Heading>{tagHeader}</Heading>

  <section class="pt-4 space-y-4">
    {
      sites.map((site) => (
        <Card key={site.id}>
          <CardHeader>
            <CardTitle>
              <a
                href={site.data.url}
                target="_blank"
                rel="noopener noreferrer"
                class="hover:underline"
              >
                {site.data.title}
              </a>
            </CardTitle>
            <CardDescription>{site.data.description}</CardDescription>
          </CardHeader>
          <CardFooter className="flex flex-wrap gap-1">
            {(site.data.tags ?? []).map((tag) => (
              <Badge key={tag}>
                <a href={`/tag/${tag.replace(/\s+/g, "-")}/`}>{tag}</a>
              </Badge>
            ))}
          </CardFooter>
        </Card>
      ))
    }
  </section>

  <div class="mt-8 flex justify-center">
    <Paginator
      currentPage={currentPage}
      totalPages={totalPages}
      basePath={basePath}
    />
  </div>
</BaseLayout>
