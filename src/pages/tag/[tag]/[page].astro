---
import Heading from "@/components/Heading.astro";
import Paginator from "@/components/Paginator.astro";
import SiteList from "@/components/SiteList.astro";
import TagFilterList from "@/components/TagFilterList.astro";
import BaseLayout from "@/layouts/BaseLayout.astro";
import {
  extractUniqueTags,
  getSitesByTag,
  getSortedSites,
  slugify,
} from "@/lib/siteUtils";

// Get static paths for pagination under each tag
export async function getStaticPaths() {
  const allSites = await getSortedSites();
  const tagCounts = new Map<string, number>();

  for (const site of allSites) {
    for (const tag of site.data.tags ?? []) {
      tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);
    }
  }

  const perPage = 10;
  const paths = [];

  for (const [tag, count] of tagCounts.entries()) {
    const totalPages = Math.ceil(count / perPage);
    const tagSlug = slugify(tag);

    // Only generate pages 2 through N here; page 1 is handled by index.astro
    for (let i = 2; i <= totalPages; i++) {
      paths.push({
        params: { tag: tagSlug, page: String(i) },
        props: { tag, page: i },
      });
    }
  }

  return paths;
}

const { tag, page } = Astro.props;
const perPage = 10;

const { paginated, totalPages, allFiltered } = await getSitesByTag(
  tag,
  page,
  perPage,
);
const uniqueTags = extractUniqueTags(allFiltered);

const tagHeader = `${allFiltered.length} site${allFiltered.length === 1 ? "" : "s"} tagged with "${tag}"`;
const title = `${tagHeader} | SYWYKE - Page ${page}`;
const description = tagHeader;

const basePath = `/tag/${slugify(tag)}`;
---

<BaseLayout title={title} description={description}>
  <Heading level={2}>Browse Sites by Tag</Heading>

  <TagFilterList tags={uniqueTags} />

  <Heading level={2}>{tagHeader}</Heading>

  <SiteList sites={paginated} />

  <div class="mt-8 flex justify-center">
    <Paginator currentPage={page} totalPages={totalPages} basePath={basePath} />
  </div>
</BaseLayout>
