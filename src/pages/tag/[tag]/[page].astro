---
import Heading from "@/components/Heading.astro";
import Paginator from "@/components/Paginator.astro";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import BaseLayout from "@/layouts/BaseLayout.astro";
import {
  extractUniqueTags,
  getSitesByTag,
  getSortedSites,
  slugify,
} from "@/lib/siteUtils";

// Get static paths for pagination under each tag
export async function getStaticPaths() {
  const allSites = await getSortedSites();
  const tagCounts = new Map<string, number>();

  for (const site of allSites) {
    for (const tag of site.data.tags ?? []) {
      tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);
    }
  }

  const perPage = 10;
  const paths = [];

  for (const [tag, count] of tagCounts.entries()) {
    const totalPages = Math.ceil(count / perPage);
    const tagSlug = slugify(tag);

    // Only generate pages 2 through N here; page 1 is handled by index.astro
    for (let i = 2; i <= totalPages; i++) {
      paths.push({
        params: { tag: tagSlug, page: String(i) },
        props: { tag, page: i },
      });
    }
  }

  return paths;
}

const { tag, page } = Astro.props;
const perPage = 10;

const { paginated, totalPages, allFiltered } = await getSitesByTag(
  tag,
  page,
  perPage,
);
const uniqueTags = extractUniqueTags(allFiltered);

const tagHeader = `${allFiltered.length} site${allFiltered.length === 1 ? "" : "s"} tagged with "${tag}"`;
const title = `${tagHeader} | SYWYKE - Page ${page}`;
const description = tagHeader;

const basePath = `/tag/${slugify(tag)}`;
---

<BaseLayout title={title} description={description}>
  <Heading>Browse Sites by Tag</Heading>

  <div class="flex flex-wrap gap-1 mb-4">
    {
      uniqueTags.map((oneTag) => (
        <Badge key={oneTag}>
          <a href={`/tag/${slugify(oneTag)}/`}>{oneTag}</a>
        </Badge>
      ))
    }
  </div>

  <Heading>{tagHeader}</Heading>

  <section class="pt-4 space-y-4">
    {
      paginated.map((site) => (
        <Card key={site.id}>
          <CardHeader>
            <CardTitle>
              <a
                href={site.data.url}
                target="_blank"
                rel="noopener noreferrer"
                class="hover:underline"
              >
                {site.data.title}
              </a>
            </CardTitle>
            <CardDescription>{site.data.description}</CardDescription>
          </CardHeader>
          <CardFooter className="flex flex-wrap gap-1">
            {(site.data.tags ?? []).map((t) => (
              <Badge key={t}>
                <a href={`/tag/${slugify(t)}/`}>{t}</a>
              </Badge>
            ))}
          </CardFooter>
        </Card>
      ))
    }
  </section>

  <div class="mt-8 flex justify-center">
    <Paginator currentPage={page} totalPages={totalPages} basePath={basePath} />
  </div>
</BaseLayout>
