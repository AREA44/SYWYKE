---
export interface Props {
  currentPage: number | string;
  totalPages: number | string;
  basePath?: string;
}

// Pull raw props
const rawCurrent = Astro.props.currentPage;
const rawTotal = Astro.props.totalPages;

// Convert to integers
const currentPage =
  typeof rawCurrent === "string" ? Number.parseInt(rawCurrent, 10) : rawCurrent;
const totalPages =
  typeof rawTotal === "string" ? Number.parseInt(rawTotal, 10) : rawTotal;

// Fallback if parsing fails
if (Number.isNaN(currentPage) || Number.isNaN(totalPages)) {
  throw new Error(
    "Invalid pagination props: currentPage and totalPages must be numeric",
  );
}

const basePath = Astro.props.basePath ?? "/page";

// If there’s only one or zero pages, don’t render anything
if (totalPages <= 1) {
  return null;
}

/**
 * Build page‐number list + ellipses
 */
function getPaginationItems(currentPage: number, totalPages: number) {
  const delta = 1;
  const range: (number | "ellipsis")[] = [];
  const rangeWithDots: (number | "ellipsis")[] = [];

  // Collect 1, totalPages, and pages around currentPage
  for (let i = 1; i <= totalPages; i++) {
    if (
      i === 1 ||
      i === totalPages ||
      (i >= currentPage - delta && i <= currentPage + delta)
    ) {
      range.push(i);
    }
  }

  // Insert ellipsis or missing single pages
  let prev: number | null = null;
  for (const item of range) {
    // Only run page‐gap logic if `item` is a number
    if (typeof item === "number" && prev !== null) {
      // Now `item` is known to be a `number`, and `prev` is a `number`
      const gap = item - prev;

      if (gap === 2) {
        // Exactly one page missing in between, e.g. [3, 5] → insert 4
        rangeWithDots.push(prev + 1);
      } else if (gap > 2) {
        // More than one page missing → insert ellipsis
        rangeWithDots.push("ellipsis");
      }
    }

    // Always push the current page number if it’s a number;
    // if it was "ellipsis", we push "ellipsis" here instead.
    rangeWithDots.push(item);

    // Update `prev` only if `item` is a number
    if (typeof item === "number") {
      prev = item;
    }
  }

  return rangeWithDots;
}

const paginationItems = getPaginationItems(currentPage, totalPages);
---

<nav class="mt-8 flex justify-center gap-2">
  {
    currentPage > 1 && (
      <a
        href={currentPage === 2 ? `/` : `${basePath}/${currentPage - 1}/`}
        class="inline-flex items-center rounded-md border px-3 py-1.5 text-sm font-medium transition-colors hover:bg-muted"
      >
        ← Prev
      </a>
    )
  }

  {
    paginationItems.map((item) => {
      if (item === "ellipsis") {
        return (
          <span class="inline-flex items-center px-3 py-1.5 text-sm font-medium">
            …
          </span>
        );
      }

      const pageNum = item as number;
      const href = pageNum === 1 ? `/` : `${basePath}/${pageNum}/`;
      const isActive = pageNum === currentPage;

      return (
        <a
          href={href}
          class={`inline-flex items-center rounded-md border px-3 py-1.5 text-sm font-medium ${
            isActive ? "bg-primary text-primary-foreground" : "hover:bg-muted"
          }`}
        >
          {pageNum}
        </a>
      );
    })
  }

  {
    currentPage < totalPages && (
      <a
        href={`${basePath}/${currentPage + 1}/`}
        class="inline-flex items-center rounded-md border px-3 py-1.5 text-sm font-medium transition-colors hover:bg-muted"
      >
        Next →
      </a>
    )
  }
</nav>
