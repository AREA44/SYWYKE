---
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";

export interface Props {
  currentPage: number | string;
  totalPages: number | string;
  basePath?: string;
  siblingCount?: number; // optional: how many pages to show around current page
}

// Extract and coerce props
const rawCurrent = Astro.props.currentPage;
const rawTotal = Astro.props.totalPages;
const basePath = Astro.props.basePath ?? "/page";
const siblingCount = Astro.props.siblingCount ?? 1;

// Parse numbers safely
const currentPage =
  typeof rawCurrent === "string" ? Number.parseInt(rawCurrent, 10) : rawCurrent;
const totalPages =
  typeof rawTotal === "string" ? Number.parseInt(rawTotal, 10) : rawTotal;

// Validate
if (Number.isNaN(currentPage) || Number.isNaN(totalPages)) {
  throw new Error(
    "Invalid pagination props: currentPage and totalPages must be numeric"
  );
}

if (totalPages <= 1) {
  return null;
}

// Pagination logic
function getPaginationItems(
  currentPage: number,
  totalPages: number,
  delta: number
) {
  const range: (number | "ellipsis")[] = [];
  const rangeWithDots: (number | "ellipsis")[] = [];

  for (let i = 1; i <= totalPages; i++) {
    if (
      i === 1 ||
      i === totalPages ||
      (i >= currentPage - delta && i <= currentPage + delta)
    ) {
      range.push(i);
    }
  }

  let prev: number | null = null;
  for (const item of range) {
    if (typeof item === "number" && prev !== null) {
      const gap = item - prev;
      if (gap === 2) {
        rangeWithDots.push(prev + 1);
      } else if (gap > 2) {
        rangeWithDots.push("ellipsis");
      }
    }

    rangeWithDots.push(item);
    if (typeof item === "number") {
      prev = item;
    }
  }

  return rangeWithDots;
}

const paginationItems = getPaginationItems(
  currentPage,
  totalPages,
  siblingCount
);
---

<Pagination>
  <PaginationContent>
    {
      currentPage > 1 && (
        <PaginationItem>
          <PaginationPrevious
            href={currentPage === 2 ? `/` : `${basePath}/${currentPage - 1}/`}
          />
        </PaginationItem>
      )
    }

    {
      paginationItems.map((item, index) => {
        if (item === "ellipsis") {
          return (
            <PaginationItem key={`ellipsis-${index}`}>
              <PaginationEllipsis />
            </PaginationItem>
          );
        }

        const pageNum = item as number;
        const href = pageNum === 1 ? `/` : `${basePath}/${pageNum}/`;

        return (
          <PaginationItem key={`page-${pageNum}`}>
            <PaginationLink
              href={href}
              isActive={pageNum === currentPage}
              aria-current={pageNum === currentPage ? "page" : undefined}
            >
              {pageNum}
            </PaginationLink>
          </PaginationItem>
        );
      })
    }

    {
      currentPage < totalPages && (
        <PaginationItem>
          <PaginationNext href={`${basePath}/${currentPage + 1}/`} />
        </PaginationItem>
      )
    }
  </PaginationContent>
</Pagination>
